spring.application.name=recruitment-task

spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/complains}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:appuser}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:apppass}
spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:validate}
spring.liquibase.enabled=${SPRING_LIQUIBASE_ENABLED:true}
spring.jpa.show-sql=true

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

external.geoip.url=${EXTERNAL_GEO_IP_URL:https://ipapi.co/}
external.geoip.timeout=${EXTERNAL_GEO_IP_TIMEOUT:3}

# Kafka bootstrap server address (point to your Kafka broker)
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}

# Serializer for sending messages (key and value)
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

# Deserializer for receiving messages (if consuming)
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Consumer group id (required for consumers)
spring.kafka.consumer.group-id=${KAFKA_CONSUMER_GROUP: complaint-consumer-group}
app.kafka.topic.complaints-events=${KAFKA_COMPLAINTS_TOPIC: complaints-events-topic}

# Additional producer configs (optional)
spring.kafka.producer.acks=all
spring.kafka.producer.retries=3

# Additional consumer configs (optional)
spring.kafka.consumer.auto-offset-reset=earliest
